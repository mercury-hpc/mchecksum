#------------------------------------------------------------------------------
# External dependencies
#------------------------------------------------------------------------------
# nothing for now
# set(MCHECKSUM_EXT_INCLUDE_DEPENDENCIES
#   ${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES}
#   ...
# )
option(MCHECKSUM_USE_ZLIB "Use ZLIB checksum." OFF)
if(MCHECKSUM_USE_ZLIB)
  find_package(ZLIB REQUIRED)
  if(ZLIB_FOUND)
    message(STATUS "ZLIB include directory: ${ZLIB_INCLUDE_DIRS}")
    set(MCHECKSUM_HAS_ZLIB 1)
    set(MCHECKSUM_EXT_INCLUDE_DEPENDENCIES ${ZLIB_INCLUDE_DIRS}
      ${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES}
    )
    set(MCHECKSUM_EXT_LIB_DEPENDENCIES ${ZLIB_LIBRARIES}
      ${MCHECKSUM_EXT_LIB_DEPENDENCIES}
    )
  else()
    message(FATAL_ERROR "Could not find ZLIB, please check ZLIB_INCLUDE_DIRS.")
  endif()
endif()

include_directories(${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES})
  
#------------------------------------------------------------------------------
# Internal dependencies
#------------------------------------------------------------------------------
# nothing for now
# add_subdirectory()
# include_directories(
#  ${CMAKE_CURRENT_SOURCE_DIR}/...
#  ${CMAKE_CURRENT_BINARY_DIR}/...
# )
# set(MCHECKSUM_EXPORTED_LIBS ... ${MCHECKSUM_EXPORTED_LIBS})

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
# Set unique var used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(MCHECKSUM_BUILD_SHARED_LIBS 1)
  set(MCHECKSUM_LIBTYPE SHARED)
else()
  set(MCHECKSUM_BUILD_SHARED_LIBS 0)
  set(MCHECKSUM_LIBTYPE STATIC)
endif()

if(MCHECKSUM_ENABLE_VERBOSE_ERROR)
  set(MCHECKSUM_HAVE_VERBOSE_ERROR 1)
else()
  set(MCHECKSUM_HAVE_VERBOSE_ERROR 0)
endif()

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/mchecksum_config.h
)

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  )

set(MCHECKSUM_SRCS
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_crc16.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_crc64.c
)

if(MCHECKSUM_HAS_ZLIB)
  set(MCHECKSUM_SRCS
    ${MCHECKSUM_SRCS}
    ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_zlib.c
  )
endif()

#----------------------------------------------------------------------------
# Libraries
#----------------------------------------------------------------------------
# mchecksum
add_library(mchecksum ${MCHECKSUM_SRCS})
target_link_libraries(mchecksum
#  ${MCHECKSUM_EXPORTED_LIBS}
  ${MCHECKSUM_EXT_LIB_DEPENDENCIES}
)
mchecksum_set_lib_options(mchecksum "mchecksum" ${MCHECKSUM_LIBTYPE})
if(MCHECKSUM_ENABLE_COVERAGE)
  set_coverage_flags(mchecksum)
endif()

set(MCHECKSUM_EXPORTED_LIBS mchecksum ${MCHECKSUM_EXPORTED_LIBS})

#---------------------------------------------------------------------------
# Add Target(s) to CMake Install
#---------------------------------------------------------------------------
install(
  TARGETS
    mchecksum
  EXPORT
    ${MCHECKSUM_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${MCHECKSUM_INSTALL_BIN_DIR}
)

# This may not be the conventional way of doing things but we need a dirty hack
# to have targets exported into multiple locations
if(MCHECKSUM_EXTERNALLY_CONFIGURED AND MCHECKSUM_EXTERNAL_EXPORTED_TARGETS)
install(
  TARGETS
    mchecksum
  EXPORT
    ${MCHECKSUM_EXTERNAL_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${MCHECKSUM_INSTALL_BIN_DIR}
)
endif()

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
set(MCHECKSUM_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_error.h
  ${CMAKE_CURRENT_BINARY_DIR}/mchecksum_config.h
)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  FILES
    ${MCHECKSUM_HEADERS}
  DESTINATION
    ${MCHECKSUM_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
install(
  EXPORT
    ${MCHECKSUM_EXPORTED_TARGETS}
  DESTINATION
    ${MCHECKSUM_INSTALL_DATA_DIR}/cmake/mchecksum
  FILE
    ${MCHECKSUM_EXPORTED_TARGETS}.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
if(NOT MCHECKSUM_EXTERNALLY_CONFIGURED)
export(
  TARGETS
    ${MCHECKSUM_EXPORTED_LIBS}
  FILE
    ${MCHECKSUM_EXPORTED_TARGETS}.cmake
)
endif()

#------------------------------------------------------------------------------
# Set variables for parent scope
#------------------------------------------------------------------------------
# Used by config.cmake.build.in and Testing
set(MCHECKSUM_INCLUDES_BUILD_TIME
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
#  ${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

# Used by config.cmake.install.in
set(MCHECKSUM_INCLUDES_INSTALL_TIME
  ${MCHECKSUM_INSTALL_INCLUDE_DIR}
#  ${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

# Pkg-config configuration
if(NOT WIN32)
  if(CMAKE_BUILD_TYPE)
    string(TOLOWER ${CMAKE_BUILD_TYPE} lower_cmake_build_type)
  endif()

  foreach(exported_lib ${MCHECKSUM_EXPORTED_LIBS})
    if(lower_cmake_build_type MATCHES "debug")
      get_target_property(MCHECKSUM_LIBRARY ${exported_lib} DEBUG_OUTPUT_NAME)
    else()
      get_target_property(MCHECKSUM_LIBRARY ${exported_lib} RELEASE_OUTPUT_NAME)
    endif()
    set(MCHECKSUM_LIBRARIES "${MCHECKSUM_LIBRARIES} -l${MCHECKSUM_LIBRARY}")
  endforeach()
  set(MCHECKSUM_LIBRARIES ${MCHECKSUM_LIBRARIES} PARENT_SCOPE)

endif()
