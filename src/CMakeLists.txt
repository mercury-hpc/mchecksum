#------------------------------------------------------------------------------
# Include source and build directories
#------------------------------------------------------------------------------
include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
)

#------------------------------------------------------------------------------
# Internal dependencies
#------------------------------------------------------------------------------
# nothing for now
# add_subdirectory()
# include_directories(
#  ${CMAKE_CURRENT_SOURCE_DIR}/...
#  ${CMAKE_CURRENT_BINARY_DIR}/...
# )
# set(MCHECKSUM_EXPORTED_LIBS ... ${MCHECKSUM_EXPORTED_LIBS})

#------------------------------------------------------------------------------
# External dependencies
#------------------------------------------------------------------------------
# ZLIB
option(MCHECKSUM_USE_ZLIB "Use ZLIB checksum." OFF)
if(MCHECKSUM_USE_ZLIB)
  find_package(ZLIB REQUIRED)
  if(ZLIB_FOUND)
    message(STATUS "ZLIB include directory: ${ZLIB_INCLUDE_DIRS}")
    set(MCHECKSUM_HAS_ZLIB 1)
    include_directories(${ZLIB_INCLUDE_DIRS})
    set(MCHECKSUM_EXT_LIB_DEPENDENCIES ${ZLIB_LIBRARIES}
      ${MCHECKSUM_EXT_LIB_DEPENDENCIES}
    )
  else()
    message(FATAL_ERROR "Could not find ZLIB, please check ZLIB_INCLUDE_DIRS.")
  endif()
endif()

option(MCHECKSUM_USE_SSE4_2 "Use SSE 4.2 instruction set." OFF)
if(MCHECKSUM_USE_SSE4_2)
  message(STATUS "Using SSE 4.2 instruction set.")
  set(MCHECKSUM_HAS_SSE4_2 1)
  if(WIN32)
    add_definitions(/arch:SSE4.2)
  else()
    add_definitions(-msse4.2)
  endif()
endif(MCHECKSUM_USE_SSE4_2)

# ISA-L
option(MCHECKSUM_USE_ISAL "Use ISA-L checksum." OFF)
if(MCHECKSUM_USE_ISAL)
  find_package(ISAL REQUIRED)
  if(ISAL_FOUND)
    message(STATUS "ISAL include directory: ${ISAL_INCLUDE_DIRS}")
    set(MCHECKSUM_HAS_ISAL 1)
    include_directories(${ISAL_INCLUDE_DIRS})
    set(MCHECKSUM_EXT_LIB_DEPENDENCIES ${ISAL_LIBRARIES}
      ${MCHECKSUM_EXT_LIB_DEPENDENCIES}
    )
  else()
    message(FATAL_ERROR "Could not find ISAL, please check ISAL_INCLUDE_DIRS.")
  endif()
endif()

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
# Set unique var used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(MCHECKSUM_BUILD_SHARED_LIBS 1)
  set(MCHECKSUM_LIBTYPE SHARED)
else()
  set(MCHECKSUM_BUILD_SHARED_LIBS 0)
  set(MCHECKSUM_LIBTYPE STATIC)
endif()

if(MCHECKSUM_ENABLE_VERBOSE_ERROR)
  set(MCHECKSUM_HAVE_VERBOSE_ERROR 1)
else()
  set(MCHECKSUM_HAVE_VERBOSE_ERROR 0)
endif()

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_config.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/mchecksum_config.h
)

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
set(MCHECKSUM_SRCS
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_crc16.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_crc32c.c
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_crc64.c
)

if(MCHECKSUM_HAS_ZLIB)
  set(MCHECKSUM_SRCS
    ${MCHECKSUM_SRCS}
    ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_zlib.c
  )
endif()

set(MCHECKSUM_HASH_TYPES crc16 crc32c crc64)
if(MCHECKSUM_HAS_ZLIB)
  set(MCHECKSUM_HASH_TYPES ${MCHECKSUM_HASH_TYPES} crc32 adler32)
endif()

#----------------------------------------------------------------------------
# Libraries
#----------------------------------------------------------------------------
# mchecksum
add_library(mchecksum ${MCHECKSUM_SRCS})
target_link_libraries(mchecksum
#  ${MCHECKSUM_EXPORTED_LIBS}
  ${MCHECKSUM_EXT_LIB_DEPENDENCIES}
)
mchecksum_set_lib_options(mchecksum "mchecksum" ${MCHECKSUM_LIBTYPE})
if(MCHECKSUM_ENABLE_COVERAGE)
  set_coverage_flags(mchecksum)
endif()

set(MCHECKSUM_EXPORTED_LIBS mchecksum ${MCHECKSUM_EXPORTED_LIBS})

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
set(MCHECKSUM_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum.h
  ${CMAKE_CURRENT_SOURCE_DIR}/mchecksum_error.h
  ${CMAKE_CURRENT_BINARY_DIR}/mchecksum_config.h
)

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  FILES
    ${MCHECKSUM_HEADERS}
  DESTINATION
    ${MCHECKSUM_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#---------------------------------------------------------------------------
# Add Target(s) to CMake Install
#---------------------------------------------------------------------------
install(
  TARGETS
    mchecksum
  EXPORT
    ${MCHECKSUM_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${MCHECKSUM_INSTALL_BIN_DIR}
)

# This may not be the conventional way of doing things but we need a dirty hack
# to have targets exported into multiple locations
if(MCHECKSUM_EXTERNALLY_CONFIGURED AND MCHECKSUM_EXTERNAL_EXPORTED_TARGETS)
install(
  TARGETS
    mchecksum
  EXPORT
    ${MCHECKSUM_EXTERNAL_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${MCHECKSUM_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${MCHECKSUM_INSTALL_BIN_DIR}
)
endif()

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
install(
  EXPORT
    ${MCHECKSUM_EXPORTED_TARGETS}
  DESTINATION
    ${MCHECKSUM_INSTALL_DATA_DIR}/cmake/mchecksum
  FILE
    ${MCHECKSUM_EXPORTED_TARGETS}.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
if(NOT MCHECKSUM_EXTERNALLY_CONFIGURED)
export(
  TARGETS
    ${MCHECKSUM_EXPORTED_LIBS}
  FILE
    ${MCHECKSUM_EXPORTED_TARGETS}.cmake
)
endif()

#------------------------------------------------------------------------------
# Set variables for parent scope
#------------------------------------------------------------------------------
set(MCHECKSUM_HASH_TYPES ${MCHECKSUM_HASH_TYPES} PARENT_SCOPE)

# Used by config.cmake.build.in and Testing
set(MCHECKSUM_INCLUDES_BUILD_TIME
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

# Used by config.cmake.install.in
set(MCHECKSUM_INCLUDES_INSTALL_TIME
  ${MCHECKSUM_INSTALL_INCLUDE_DIR}
  ${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

# Pkg-config configuration
if(NOT WIN32)
  if(CMAKE_BUILD_TYPE)
    string(TOLOWER ${CMAKE_BUILD_TYPE} lower_cmake_build_type)
  endif()

  foreach(exported_lib ${MCHECKSUM_EXPORTED_LIBS})
    if(lower_cmake_build_type MATCHES "debug")
      get_target_property(MCHECKSUM_LIBRARY ${exported_lib} DEBUG_OUTPUT_NAME)
    else()
      get_target_property(MCHECKSUM_LIBRARY ${exported_lib} RELEASE_OUTPUT_NAME)
    endif()
    set(MCHECKSUM_LIBRARIES "${MCHECKSUM_LIBRARIES} -l${MCHECKSUM_LIBRARY}")
  endforeach()
  set(MCHECKSUM_LIBRARIES ${MCHECKSUM_LIBRARIES} PARENT_SCOPE)

  # Need to generate -llib if not already passed
  foreach(lib_dep ${MCHECKSUM_EXT_LIB_DEPENDENCIES})
    # get library name
    get_filename_component(lib_name ${lib_dep} NAME_WE)
    if(lib_name MATCHES "^-l")
      # lib_name found is -lxxx
      set(MCHECKSUM_EXT_LIB_DEPENDENCIES_LIST ${MCHECKSUM_EXT_LIB_DEPENDENCIES_LIST} ${lib_name})
    else()
      # lib_name is /path/to/lib so get library path and name
      get_filename_component(lib_path ${lib_dep} PATH)
      string(REGEX REPLACE "^lib" "" lib_name ${lib_name})
      set(MCHECKSUM_EXT_LIB_DEPENDENCIES_LIST ${MCHECKSUM_EXT_LIB_DEPENDENCIES_LIST} -L${lib_path} -l${lib_name})
    endif()
  endforeach()
  if(MCHECKSUM_EXT_LIB_DEPENDENCIES_LIST)
    list(REMOVE_DUPLICATES MCHECKSUM_EXT_LIB_DEPENDENCIES_LIST)
  endif()

  foreach(lib_dep ${MCHECKSUM_EXT_LIB_DEPENDENCIES_LIST})
    set(MCHECKSUM_LIB_DEPENDENCIES "${MCHECKSUM_LIB_DEPENDENCIES} ${lib_dep}")
  endforeach()
  set(MCHECKSUM_LIB_DEPENDENCIES ${MCHECKSUM_LIB_DEPENDENCIES} PARENT_SCOPE)

  foreach(inc_dep ${MCHECKSUM_EXT_INCLUDE_DEPENDENCIES})
    set(MCHECKSUM_INCLUDE_DEPENDENCIES "${MCHECKSUM_INCLUDE_DEPENDENCIES} -I${inc_dep}")
  endforeach()
  set(MCHECKSUM_INCLUDE_DEPENDENCIES ${MCHECKSUM_INCLUDE_DEPENDENCIES} PARENT_SCOPE)
endif()
